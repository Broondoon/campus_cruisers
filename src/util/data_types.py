"""
dataType.py

Contains the definition for the node() object class.

We could also update this file to have any/all custom objects/classes.

"""
# import numpy as np

class Solution: 
    nodes = ()

class Nodes:
    id = None
    x = None
    y = None

    def __init__(self, id, coordinate):
        self.id = id
        self.xy = coordinate



def defineNode():
    CLE = (0,48.46385902698279, -123.31022982698542)
    DTB = (1, 48.465078386216554, -123.31387649906908)
    ECS = (2, 48.46113617040822, -123.31144840329222)
    A = (3, 48.46137123703085, -123.31186238839109)
    B = (4, 48.46144238255688, -123.31297282285963)
    C =(5, 48.46203288657421, -123.31309620446726)
    D = (6, 48.46231795765519, -123.31314127534513)
    E = (7, 48.462662522603, -123.31321083409442)
    F = (8, 48.46342610204105, -123.31340018103346)
    G = (9, 48.46358150936804, -123.31345705671202)
    H = (10, 48.46357605432841, -123.31369001219407)
    I = (11, 48.46338572867817, -123.31368937765774)
    J = (12, 48.463692981969224, -123.31369478087726)
    K = (13, 48.46388032081692, -123.31373454713497)
    L = (14, 48.46415135200406, -123.31375764767687)
    M = (15, 48.46434007846103, -123.3137951796987)
    N = (16, 48.46452050859181, -123.31380143503718)
    O = (17, 48.46409494297565, -123.31392991258758)
    P = (18, 48.46425459828522, -123.31401192394024)
    Q = (19, 48.465043410178254, -123.31316249107589)
    R = (20, 48.46506586485167, -123.31268500347667)
    S = (21, 48.46463024241453, -123.31258679680732)
    T = (22, 48.46488847266101, -123.31293221336846)
    U = (23, 48.46466593363721, -123.31290932401616)
    V = (24, 48.464576424708596, -123.31319310804354)
    W = (25, 48.464563639242705, -123.31274859056202)
    X = (26, 48.46457441303656, -123.31243265661517)
    Y = (27, 48.4644391418955, -123.31239654987678)
    Z = (28, 48.46413511942271, -123.31233815143615)
    AA = (29, 48.46422774284721, -123.31197756936676)
    AB = (30, 48.46423205090937, -123.31169170250094)
    AC = (31, 48.464492687988674, -123.31129213858618)
    AD = (32, 48.46412865731801, -123.31123691430398)
    AE = (33, 48.46382278337691, -123.31114920516384)
    AF = (34, 48.46372154300355, -123.31229592111427)
    AG = (35, 48.463836849996845, -123.31088451782277)
    AH = (36, 48.46334867504509, -123.31012884636613)
    AI = (37, 48.46292716358054, -123.31003749311604)
    AJ = (38, 48.46330324283998, -123.31078354465832)
    AK = (39, 48.4628438704791, -123.31067696586706)
    AL = (40, 48.46281105800872, -123.3108178021276)
    AM = (41, 48.462793389746636, -123.31120985982585)
    AN = (42, 48.46278393628378, -123.31165050880267)
    AO = (43, 48.46275083181234, -123.3121365664517)
    AP = (44, 48.46272275869386, -123.31272464719247)
    AQ = (45, 48.46366275140987, -123.31295712882488)
    AR = (46, 48.462567810094974, -123.31210582935589)
    AS = (47, 48.46269810095332, -123.31154444355855)
    AT = (48, 48.462325840470754, -123.3107725380872)
    AU = (49, 48.46150632099027, -123.3106693138996)
    AV = (50, 48.46301805525083, -123.30946674285744)
    AW = (51, 48.46308858471603, -123.30900938287407)
    AX = (52, 48.463162640549, -123.30805211779263)
    AY = (53, 48.46389261369236, -123.30823293453025)
    AZ = (54, 48.463870761236706, -123.30917892832963)
    BA = (55, 48.463848635842865, -123.30949257803245)
    BB = (56, 48.46418642357976, -123.3095243371507)
    BC = (57, 48.46415501347602, -123.30925591044864)
    BD = (58, 48.46438079469843, -123.30956096408622)
    BE = (59, 48.46462181947507, -123.30923451194397)
    BF = (60, 48.46486004224007, -123.30898709747622)
    BG = (61, 48.46467021176951, -123.30950944335464)
    BH = (62, 48.46480296576786, -123.3095157545876)

def createDistTable():
    n = 62

    arr = [[0 for _ in range(n)] for _ in range(n)]

    for i in range(n):
        for j in range(n):
            arr[i][j] = None

    arr[0][35] = arr[35][0] = 48.34
    arr[0][55] = arr[55][0] = 53.83
    arr[3][4] = arr[4][3] = 81.52
    arr[3][49] = arr[49][3] = 87.76
    arr[4][5] = arr[5][4] = 68.59
    arr[5][6] = arr[6][5] = 31.58
    arr[6][7] = arr[7][6] = 38.67
    arr[7][8] = arr[8][7] = 86.80
    arr[6][46] = arr[46][6] = 84.19
    arr[7][44] = arr[44][7] = 36.51
    arr[8][9] = arr[9][8] = 17.42
    arr[8][11] = arr[11][8] = 21.36
    arr[9][10] = arr[10][9] = 18.1
    arr[9][45] = arr[45][9] = 37.59
    arr[10][11] = arr[11][10] = 20.7
    arr[10][12] = arr[12][10] = 12.81
    arr[12][13] = arr[13][12] = 21.1
    arr[13][14] = arr[14][13] = 29.56
    arr[13][17] = arr[17][13] = 28.77
    arr[15][14] = arr[14][15] = 21.88
    arr[14][17] = arr[17][14] = 13.76
    arr[15][16] = arr[16][15] = 19.37
    arr[15][18] = arr[18][15] = 18.5
    arr[16][1] = arr[1][16] = 62.65
    arr[16][24] = arr[24][16] = 44.8
    arr[17][18] = arr[18][17] = 18.89
    arr[19][1] = arr[1][19] = 53.15
    arr[19][20] = arr[20][19] = 34.53
    arr[20][21] = arr[21][20] = 55.97
    arr[21][22] = arr[22][21] = 38.73
    arr[21][25] = arr[25][21] = 12.92
    arr[21][26] = arr[26][21] = 12.41
    arr[22][19] = arr[19][22] = 23.32
    arr[22][23] = arr[23][22] = 24.59
    arr[23][24] = arr[24][23] = 22.91
    arr[23][25] = arr[25][23] = 17.25
    arr[24][25] = arr[25][24] = 33.58 
    arr[25][27] = arr[27][25] = 28.78
    arr[26][27] = arr[27][26] = 15.36
    arr[27][28] = arr[28][27] = 33.81
    arr[27][29] = arr[29][27] = 37.86
    arr[27][31] = arr[31][27] = 81.23
    arr[28][29] = arr[29][28] = 21.67
    arr[28][34] = arr[34][28] = 45.14
    arr[29][30] = arr[30][29] = 21.33
    arr[30][31] = arr[31][30] = 39.19
    arr[30][32] = arr[32][30] = 38.62
    arr[31][32] = arr[32][31] = 40.4
    arr[32][33] = arr[33][32] = 34.53
    arr[33][34] = arr[34][33] = 84.08

    arr[34][35] = arr[35][34] = 19.82
    arr[34][45] = arr[45][34] = 47.48
    arr[34][43] = arr[43][34] = 108.24
    arr[35][36] = arr[36][35] = 56.92
    arr[35][38] = arr[38][35] = 59.39
    arr[36][37] = arr[37][36] = 47.63
    arr[36][38] = arr[38][36] = 48.54
    arr[37][39] = arr[39][37] = 48.36
    arr[37][50] = arr[50][37] = 41.68
    arr[38][39] = arr[39][38] = 51
    arr[38][42] = arr[42][38] = 85.57
    arr[39][40] = arr[40][39] = 10.84
    arr[40][41] = arr[41][40] = 28.76
    arr[41][42] = arr[42][41] = 34.74
    arr[41][47] = arr[47][41] = 26.85
    arr[41][48] = arr[48][41] = 56.55
    arr[42][43] = arr[43][42] = 34.72
    arr[43][44] = arr[44][43] = 44.48
    arr[44][45] = arr[45][44] = 107.5
    arr[43][46] = arr[46][43] = 21.44
    arr[46][47] = arr[47][46] = 42.57
    arr[47][48] = arr[48][47] = 70.58
    arr[48][49] = arr[49][48] = 80.8
    arr[50][51] = arr[51][50] = 35.61
    arr[51][52] = arr[52][51] = 71.84
    arr[51][53] = arr[53][51] = 116.43
    arr[53][54] = arr[54][53] = 71.52
    arr[54][55] = arr[55][54] = 22.64
    arr[54][57] = arr[57][54] = 22.08
    arr[55][56] = arr[56][55] = 36.26
    arr[56][57] = arr[57][56] = 20.96
    arr[56][58] = arr[58][56] = 23.17
    arr[58][59] = arr[59][58] = 36.25
    arr[59][60] = arr[60][59] = 31.6
    arr[59][61] = arr[61][59] = 21.31
    arr[60][62] = arr[62][60] = 36.67
    arr[61][62] = arr[62][61] = 15.23


def setup_data():
    defineNode()
    createDistTable()